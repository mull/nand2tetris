// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Pre-processing x
    Mux16(a=x, b[0..15]=false, sel=zx, out=xZ);
    Not16(in=xZ, out=xN);
    Mux16(a=xZ, b=xN, sel=nx, out=postX);

    // Pre-processing y
    Mux16(a=y, b[0..15]=false, sel=zy, out=yZ);
    Not16(in=yZ, out=yN);
    Mux16(a=yZ, b=yN, sel=ny, out=postY);
    // Easy enough

    // I don't think there's an easier way to do this
    // So we calculate both the ADD and AND results
    Add16(a=postX, b=postY, out=addXY);
    And16(a=postX, b=postY, out=andXY);
    // Then select which one is the result of our f(x, y)
    Mux16(a=andXY, b=addXY, sel=f, out=fx);
    // We need to know the NOT(f(x, y)), though we might not use it
    Not16(in=fx, out=notFx);
    // Then we *could* select whether our result is fx or notFx and pipe it to out
    // See the following code line, beacuse we will do that.

    // To get our zr, i.e. if our result[0..15] === 0 we can simply look if
    // any of the bits are 1 using Or16Way. And16Way returning 0 would also be useful.

    // However, none of those are available to use. But through experimenting with the
    // syntax I have found that we can pipe outputs in a really fun way, even duplicating them!
    Mux16(a=fx, b=notFx, sel=no, out=out, out[0..7]=out7, out[8..15]=out15, out[15]=leftMostbit);

    // Since we now have our leftmost bit of the result, we can simply ask if it's 1 and then pipe
    // That to our ng output pin (two's complement and all)
    And(a=leftMostbit, b=true, out=ng);

    // To get the reuslt of our zr pin we just need to check if we have any 1 bit pins
    Or8Way(in=out7, out=firstHalfHasTrue);
    Or8Way(in=out15, out=secondHalfHasTrue);
    Or(a=firstHalfHasTrue, b=secondHalfHasTrue, out=hasTrue);
    Xor(a=hasTrue, b=true, out=zr);

}