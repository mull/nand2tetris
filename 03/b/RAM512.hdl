// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Our first three bits tells us which Register in our RAM8 we should load
    // Our last three bits tells us which of the RAM64s we should select,
    // so we start by finding that out.
    DMux8Way(in=load, sel=address[6..8], a=a, b=b, c=c, d=d, f=f, e=e, g=g, h=h);

    // Now that we know which of the 8 RAM64s to load,
    // we can just give it the first six bits and let it
    // handle that itself, since we know our load bit is correct.
    RAM64(in=in, load=a, address=address[0..5], out=outa);
    RAM64(in=in, load=b, address=address[0..5], out=outb);
    RAM64(in=in, load=c, address=address[0..5], out=outc);
    RAM64(in=in, load=d, address=address[0..5], out=outd);
    RAM64(in=in, load=e, address=address[0..5], out=oute);
    RAM64(in=in, load=f, address=address[0..5], out=outf);
    RAM64(in=in, load=g, address=address[0..5], out=outg);
    RAM64(in=in, load=h, address=address[0..5], out=outh);

    // And now using our third right bits we just select which one to pipe out
    Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address[6..8], out=out);
    
}